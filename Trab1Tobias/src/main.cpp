/* -------------- O que foi feito ----------------------

Foram cumpridas todas as exig√™ncias obrigat√≥rias do trabalho e mais alguns extras.
Abaixo h√° uma breve descri√ß√£o do cumprimento das exig√™ncias:

--------Obrigat√≥rias--------

1.Carregamento de imagens BMP 24bits sem compacta√ß√£o


    Imagens coloridas em formato BMP s√£o carregadas corretamente, inclusive em formato √≠mpar.


2.Menu lateral funcional implementado


    Interface com bot√µes, checkbox e slider.


3.Camadas separadas para cada imagem


    Cada imagem √© exibida em sua pr√≥pria camada com transpar√™ncia bin√°ria.


4.Desenho com o mouse sobre a camada ativa


    Ao pressionar o bot√£o esquerdo, √© poss√≠vel pintar com um raio ao redor do mouse.


5.Identifica√ß√£o visual da camada ativa


    Apenas uma camada √© ativa por vez e h√° destaque visual indicando qual √© a ativa.


6.Possibilidade de trocar a cor do desenho


    Interface permite selecionar diferentes cores para desenhar.


7.Plano de fundo quadriculado vis√≠vel


    Usado para representar a transpar√™ncia da camada inferior.


8.Reposicionamento e oculta√ß√£o de camadas


    Ordem de exibi√ß√£o das camadas pode ser alterada e camadas podem ser ocultadas.


9.Bot√µes para trocar a camada ativa


    Interface permite alternar facilmente qual camada est√° recebendo modifica√ß√µes.


10.Implementa√ß√£o de efeitos na camada ativa:


    Flip Horizontal
    Flip Vertical
    Controle de Brilho


12.Componentes obrigat√≥rios da interface foram utilizados corretamente:


    Bot√£o funcional
    Checkbox com efeito aplicado
    Slider para controle (como brilho, por exemplo)


13.Uso de estruturas e/ou orienta√ß√£o a objetos


-------------Extras-----------
1.Diferentes tipos de pincel/formas para desenhar com o mouse

    O usu√°rio pode escolher entre 7 diferentes formas ou tamanhos para utilizar ou a borracha.

2.Redimensionamento e movimenta√ß√£o das imagens

    As imagens das camadas podem ser movimentadas



----------------------- Codigo ---------------------------
    O c√≥digo tem inicio na main.cpp original do professor pozzer com alguns ajustes
para identifica√ß√£o de mais funcionalidades do mouse bem como reconhecer outras classes e chama-las
atrav√©s do render. Modifiquei algumas funcionalidades do bmp.cpp para poder renderizar as imagens
em locais diferentes de x=0 e y=0, para poder flipar as imagens junto a matriz, para alterar o brilho
e para renderizar imagens de tamanhos impares. Na gl_canvas foi adicionado uma nova cor apenas para a
grade n√£o ser de uma tonalidade muito forte. Al√©m disso, utilizei 2 arquivos extras, Camada.h e Tela.h,
a Camada √© uma classe suporte para o Tela.h. O Tela.h come√ßa com as vari√°veis e logo em seguida
o contrutor da classe, onde ocorre as inicializa√ß√µes. Na fun√ß√£o renderTela(), acontece todas as renderiza√ß√µes
primeiramente por meio da fun√ß√£o desenhaMenu() onde t√™m a l√≥gica do menus e de algumas fun√ß√µes, na continuidade
da renderTela() h√° a continua√ß√£o das a√ß√µes realizadas mediante a intera√ß√£o do usu√°rio com o canvas, tanto no menu,
tanto para a parte gr√°fica.


---------Como usar----------------
üé® Se√ß√£o de Camadas
    Bot√µes ‚ÄúCamada: N‚Äù
         Exibem a lista das camadas carregadas. A camada ativa √© destacada visualmente.
         A camada ativa √© aquela que receber√° os desenhos e altera√ß√µes.


    ‚¨ÜÔ∏è‚¨áÔ∏è (primeiros bot√µes √† esquerda)
        Funcionam como scroll do menu, permitindo visualizar outras camadas quando houver muitas.


    ‚¨ÜÔ∏è‚¨áÔ∏è (segundos bot√µes √† direita)
        Servem para alterar a ordem de exibi√ß√£o das camadas (mudar a prioridade/visibilidade delas).


    [ + ] e [ - ]
    [ + ]: Adiciona uma nova camada vazia.
    [ - ]: Remove a camada atualmente ativa.


    Ret√¢ngulos pretos acima da barra de brilho
        Ao clicar, carregam novas imagens BMP para a camada ativa.


    Quadrado com um ponto no meio
        Alterna a visibilidade da camada ativa (exibir ou ocultar).



üñåÔ∏è Se√ß√£o de Desenho
    Formas pretas (quadrado, c√≠rculo, cora√ß√£o etc.)
     Selecionam o tipo de pincel para desenhar com o mouse.


    Tamanho (Tam)
     Slider que define o raio ou tamanho do pincel.


    Brilho
     Slider que altera o brilho da imagem na camada ativa.


    Ferramentas diagonais (formas com linhas azuis)
     Flip vertical e horizontal da camada ativa;


    üé® Seletor de Cores
    Paleta colorida na parte inferior permite selecionar a cor atual de desenho.
     Ao clicar em uma cor, ela passa a ser usada ao pintar com o mouse.



üìå Uso Geral
    Para desenhar:
        Selecione a camada desejada, ative a visibilidade, selecione a forma, o tamanho do pincel e uma cor.
        Depois, clique e segure o bot√£o esquerdo do mouse na tela de desenho.

    Para carregar imagens novas:
        Clique em um dos ret√¢ngulos pretos (acima do brilho) com a camada desejada ativa.

    Para mover:
        Selecione a camada e arraste a imagem pressionando o bot√£o direito do mouse.



*/
#include <GL/glut.h>
#include <GL/freeglut_ext.h> //callback da wheel do mouse.

#include <math.h>
#include <stdio.h>
#include <stdlib.h>

#include "gl_canvas2d.h"
#include "bmp.h"
#include "Tela.h"
#include "Camada.h"

Bmp *img1;
unsigned char *data;
Tela *screen;
// mouse
int mouseX;
int mouseY;
int isPressed;
int click;
int estado_anterior = -2;

void render()
{
    screen->renderTela(mouseX, mouseY, isPressed, click);
    click = 0;
}

// funcao chamada toda vez que uma tecla for pressionada.
void keyboard(int key)
{
}

// funcao chamada toda vez que uma tecla for liberada
void keyboardUp(int key)
{
}

// funcao para tratamento de mouse: cliques, movimentos e arrastos
void mouse(int button, int state, int wheel, int direction, int x, int y)
{
    //
    mouseX = x;
    mouseY = y;

    if (state == 0)
    {
        if(estado_anterior != 0)
        {
            click = 1;
        }
        if (button == 0)
        {
            printf("Botao Esquerdo: %d\n", button);
            isPressed = 1;
            printf("x: %d   y: %d\n", x, y);
        }
        else if (button == 2)
        {
            printf("Botao Direito: %d\n", button);
            isPressed = 2;
            printf("x: %d   y: %d\n", x, y);

        }
        else if(button == 1)
        {
            isPressed = 3;

        }
        else
        {
            printf("Botao Desconhecido: %d\n", button);
        }

        printf("\n\n");
    }
    if (state == 1)
    {
        isPressed = 0;

    }
    estado_anterior = state;
}

int main(void)
{

    /* img1 = new Bmp(".\\__LAB2\\images\\img3.bmp");
    // img1 = new Bmp(".\\__LAB2\\images\\img1.bmp");
    // img1 = new Bmp(".\\__LAB2\\images\\img2.bmp");
    img1->convertBGRtoRGB();
    data = img1->getImage(); */

    // inicializaMatrizDesenho(&matrizDesenho, screenWidth, screenHeight);
    screen = new Tela(1200, 650, 240);
    screen->initTela();

    //Teste



    CV::run();
}
